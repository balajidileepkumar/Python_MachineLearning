table - > employee table -> salary

select * from employee es inner join salary ss on es.id = ss.id

table -> employee table -> address

select * from employee es join address ads on es.name = ads.name

acid

atomicity - >
consistency ->
isolation ->
durability -> 


python manage.py createsuperuser

python manage.py makemigrations

python manage.py migrate 

Project Name 
	settings.py ->	
	urls.py
	wsgi.py
	init.py
manage.py

urls.py ->

urlpatterns - [
	path("/home",views.home(),name="")
]

userid = request.GET.get('id')

def xxxx();
	render ()
	return HttpResponse()

class a:
	def init(self):
		pass
class b(a):
    def init(self):
		super.init()


how to setup load balancer for flask application

how to scale your django or flask application

deep copy and shallow copy in python

what are method views in python django

get the count of max item in a list 
list(map(lambda x: (list_all.count(x), list_all.index(x)), list_all))


implement a custom set class 

how do you improve the performance of your applications 
profilers, caching, stateless, load balancing

docker cloud

queues in django 

using multithreading 
----------

django is a opensource webframework

django vs flask
django can be used to build large applications, allows complete web development without need of third party tools
doesnt support visual debug
flask is used to build light weight applications, is more flexible than django as we can install any package. 
supports visual debug


features of django
seo search engine optimized
has inbuild modules for authentication, content management and rss feeds
fast and allows users to bypass csrf (cross site request forgery), click jacking, cross-site scripting
follows dry principle (dont repeat yourself)
loosely coupled with tight cohesion(the sticking together of particles of the same substance.)

django version

django-admin --version
3.2.7
import django
print(django.get_version())

Django Architecture

MVT ->
model view and template pattern 
the ‘view’ basically describes the data presented to the user.(tells what is the actual data)
the ‘templates’ on the other hand deal with the presentation of data (how the data is presented)
The ‘controller’ here is Django itself which sends the request to the appropriate 
view in accordance with the specified URL. 

Use Ajax with Django
Django-dajax or from the client side


How do you connect your Django project to the database?
Django comes with a default database which is SQLite. To connect your project to this database, use the following commands:

python manage.py migrate (migrate command looks at the INSTALLED_APPS settings and creates database tables accordingly)
python manage.py makemigrations (tells Django you have created/ changed your models)
python manage.py 
<name of the app followed by the generated id> (sqlmigrate takes the migration names and returns their SQL)
Model?
Model is the source of information that needs to be update or retrieved form and to 
django.db.models.Model
Each Model class is binded to database collection table.
 
View?
 Django views serve the purpose of encapsulation. They encapsulate the logic liable for processing a user’s request 
 and for returning the response back to the user. 

Templates?
Django’s template layer renders the information to be presented to the user in a designer-friendly format. 
Using templates, you can generate HTML dynamically. 
The HTML consists of both static as well as dynamic parts of the content. 

App and Project 
An app is basically a Web Application that is created to do something for example, a database of employee records.
A project, on the other hand, is a collection of apps of some particular website. 
Therefore, a single project can consist of ‘n’ number of apps and a single app can be in multiple projects.
 
 
types of inheritance
abstract base class inheritance
Used when you want to use the parent class to hold information that you don’t want to type for each child model. 
Here, the parent class is never used in solitude

Multitable inheritance

Used when you have to subclass an existing model and want each
model to have its own database table
proxy inheritance
Used if you only want to modify the Python-level behavior of a model, 
without changing the ‘models’ fields in any way


What is mixin?
Mixin is a type of multiple inheritance wherein you can combine behaviors and attributes of more 
than one parent class. Mixins provide an excellent way to reuse code from multiple classes. 
For example, generic class-based views consist of a mixin called TemplateResponseMixin 
whose purpose is to define render_to_response() 

 What are ‘sessions’?
Sessions are fully supported in Django. Using the session framework, you can easily store and retrieve arbitrary data 
based on the per-site-visitors. This framework basically stores data on the server-side and takes care of sending and 
receiving cookies. These cookies consist of a session ID but not the actual data itself unless you explicitly use a 
cookie-based backend.


Rather than repeating the same queries or computations for every user who visits the homepage, 
it makes sense to store those results and only recalculate them periodically. 
Any data that doesn’t need to change between requests is an excellent candidate for caching.
 
Session and cookies data is stored at the user level but 
caching data is stored at the application level and shared by all the users. 

types of caching
memcache
filesystem cache
local memory cache
database cache
set session value to  django.contrib.sessions.backends.
file”.

Rather than repeating the same queries or computations for every user who visits the homepage, 
it makes sense to store those results and only recalculate them periodically. 
Any data that doesn’t need to change between requests is an excellent candidate for caching.
 
 
 
HTTP Error 400 - Bad Request
HTTP Error 401 - Unauthorized
HTTP status 403 - Forbidden
HTTP status 404 - Not Found
HTTP status 406 - Not Acceptable
HTTP Error 408 - Request Timeout
HTTP status 500 - Internal Server Error
HTTP status 502 - Bad Gateway
HTTP status 503 - Service unavailable
HTTP status 504 - Gateway timeout
200 sucess
201

how to see the raw queries
from django.db import connection
connection.queries


 
how to map foreign key with db model
 
pandas drop column vs inplace


FAST API

token authentication in flask

static lambda function

how to improve the performance of sql queries? other than profiler 


Types of Views
Function Based Views
Class Based Views


CLASS BASED GENERIC VIEWS
FORMVIEW 
TEMPLATEVIEW
CREATEVIEW
UPDATEVIEW


Scaling your application 

https://technobeans.com/2020/12/01/scaling-django-for-millions-of-users/#:~:text=Scaling%20horizontally%20also%20requires%20you,handle%2045k%20requests%20per%20second.

Scaling vertically -> improve ram and memory on the same machine
Scaling horizontally -> make the app rendered by multiple instances
-- Service Oriented Architecture -- 
Scaling horizontally also requires you to make your app stateless and keep the state “outside”. This can be achieved in 
Django with Cache Backends (Memcache or Redis) to store data on another server to achieve statelessness. 
Adding cache to Django can help you handle 45k requests per second. 
 
 Scale the database
CAP theorem,
 Consistency
 Availabilty
 Partition Tolerance 
 
 
 Model Manager
 Can we used list as a key in dicitionary
 List or Tuple which is better
 what is through keyword in Django 
 what are the types of signals in django
 what is the difference between Patch and Put HttpVerb
 request response lifecycle in django -- 
 how to implement iterator keyword for custom class
 polymorphism in python
  
 
 different ways to combine dataframes in python


write a logic to find 
2^5 = 32 and its sum = 3+2 = 5
similarly find sum of integer characters in 2^1000


write logic to print * decorator


 
why do we use container  
 
 
 
 
 
 
 
 
 